services:
  todo-frontend-dev:
    image: todo-frontend-dev             # Name of the frontend dev Docker image
    build:
      context: ./todo-frontend           # Use the todo-frontend directory as build context
      dockerfile: dev.Dockerfile
    volumes:
      - ./todo-frontend/:/usr/src/app    # Sync project files for hot reloading
      - /usr/src/app/node_modules        # Prevent node_modules conflicts (Mac M1/M2 fix)
    container_name: todo-frontend-dev    # Name the container for easy access
    environment:
      # - VITE_BACKEND_URL=http://localhost:3000  # Update later for Nginx
      - VITE_BACKEND_URL=http://localhost:8080/api  # Use Nginx as the backend URL
  
    # Backend Service
  todo-backend-dev:
    image: todo-backend-dev
    build:
      context: ./todo-backend
      dockerfile: dev.Dockerfile
    volumes:
      - ./todo-backend/:/usr/src/app
      - /usr/src/app/node_modules
    container_name: todo-backend-dev
    environment:
      - PORT=3000
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongo
      - redis

  # MongoDB Service
  mongo:
    image: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - mongo_data:/data/db

  # Redis Service
  redis:
    image: redis
    ports:
      - 6379:6379
    command: ['redis-server', '--appendonly', 'yes']
    volumes:
      - redis_data:/data

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80  # Exposes Nginx on port 8080
    container_name: reverse-proxy
    depends_on:
      - todo-frontend-dev  # Ensure frontend starts first
      - todo-backend-dev   # Ensure backend starts before Nginx

volumes:
  mongo_data:
  redis_data: